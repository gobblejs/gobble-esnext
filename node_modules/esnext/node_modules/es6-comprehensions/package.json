{
  "name": "es6-comprehensions",
  "version": "0.2.3",
  "description": "Transforms ES6 Array Comprehensions to ES5 compliant equivalent.",
  "main": "src/index.js",
  "bin": {
    "es6-comprehensions": "bin/es6-comprehensions"
  },
  "scripts": {
    "test": "mocha --recursive --reporter spec --bail ./test"
  },
  "dependencies": {
    "esprima": "git://github.com/ariya/esprima.git#harmony",
    "through": "~2.3.4",
    "recast": "~0.5.16",
    "yargs": "~1.2.1",
    "through2": "~0.4.1",
    "ast-util": "0.0.6"
  },
  "devDependencies": {
    "mocha": "~1.18.0",
    "expect.js": "~0.3.1"
  },
  "keywords": [
    "array",
    "list",
    "comprehension",
    "es6",
    "es5",
    "parser",
    "ast"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/dreame4/es6-comprehensions.git"
  },
  "author": {
    "name": "Adam Babik"
  },
  "license": "BSD-2-Clause",
  "readme": "# es6-comprehensions\n\nCompiles JavaScript array comprehensions (proposed in ES6) to ES5-compatible syntax. For instance:\n\n```js\nvar squared = [ for (x of [1,2,3,4,5]) if (x > 2) x * x ];\n```\n\ncompiles to:\n\n```js\nvar squared = (function() {\n  var result = [];\n\n  for (var $_i0 = 0, $_arr0 = [1,2,3,4,5], $_len0 = $_arr0.length, x; $_i0 < $_len0; $_i0++) {\n    x = $_arr0[$_i0];\n\n    if (x > 2) {\n      result.push(x * x);\n    }\n  }\n\n  return result;\n})();\n```\n\nI'm glad to inform you that **es6-comprehensions** is now a part of [es-next](https://github.com/square/esnext) project.\n\nFor more information check out [the current draft for ECMAScript 6](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array-comprehension).\n\nPlease notice that the syntax has changed and many resources is still using the old one.\n\n## Installation\n\n```\n$ npm install es6-comprehensions [--save]\n```\n\n## Support\n\nArray comprehensions progressed to the Draft ECMAScript 6 Specification. It doesn't mean that there will be no changes or that array comprehensions will be included in the final ES6 Specification.\n\nES6 defines also [iterators](http://tc39wiki.calculist.org/es6/iterators/) that can be used together with [for-of loops](http://tc39wiki.calculist.org/es6/for-of/) that can be used in array comprehensions. This translator does **not** support iterators in `for-of` loops. It translates `for-of` loops to plain `for` loops. Thus, it supports only plain JS arrays.\n\n## Todo\n\n* Consider replacing plain `for` loop with `forEach` method. It will result in more compact code,\n* ~~Consider migration to escodegen.~~ Removed in order to follow up [esnext's](https://github.com/square/esnext) dependencies.\n\n## Development\n\n1. Clone the repository.\n2. Run `npm install`.\n3. Do your changes.\n\nPull requests are highly appreciated.\n\n## Changelog\n\n### v0.2.3\n\n* Binding current scope to the generated function expression. This allows one to use `this` in an array comprehension. An example can be found in [a test file](https://github.com/dreame4/es6-comprehensions/blob/master/test/parser_test.js#L48). (Thanks [@vslinko](https://github.com/vslinko) for PR.)\n\n### v0.2.2\n\n* Using [ast-util](https://github.com/square/ast-util) to generate safe temporary variables.\n\n### v0.2.1\n\n* Replaced ComprehensionExpression with CallExpression instead of ExpressionStatement.\n\n### v0.2.0\n\n* Changed API to conform to [esnext's](https://github.com/square/esnext) requirements.\n\n## License\n\nBSD\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dreame4/es6-comprehensions/issues"
  },
  "homepage": "https://github.com/dreame4/es6-comprehensions",
  "_id": "es6-comprehensions@0.2.3",
  "dist": {
    "shasum": "8cb9049a0e47846f25df2a527e9bf711a31ff64c"
  },
  "_from": "es6-comprehensions@^0.2.2",
  "_resolved": "https://registry.npmjs.org/es6-comprehensions/-/es6-comprehensions-0.2.3.tgz"
}
